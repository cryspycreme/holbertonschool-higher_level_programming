The ``integer_validator`` module
=============================

Using ``integer_validator``
-------------------

Import class from module 7-base.geometry.py:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

Import functions from module 7-base_geometry.py:
>>> integer_validator = __import__('7-base_geometry').BaseGeometry.integer_validator
>>> area = __import__('7-base_geometry').BaseGeometry.area


Tests:
    Test 1 - value is not an integer
    >>> bg.integer_validator("age", "bob")
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    Test 2 - value is <= 0
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    Test 3 - no arguments passed in
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    Test 4 - only one argument passed in
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    Test 5 - area()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

    Test 6 - positive test case
    >>> bg.integer_validator("age", 1)

    Test 7 - value is None
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer
